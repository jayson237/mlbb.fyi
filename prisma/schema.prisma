//dotenv -e .env.local -- prisma db push
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Emblem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  attribute String[]
  img       String
}

model Spell {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  desc    String
  img     String
  cd      String
  details String[]
  variant String[]
}

model Item {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  desc      String
  img       String
  category  String
  attribute String[]
}

type HeroDetailsSkills {
  name        String
  icon        String
  description String
  tips        String
}

model HeroDetails {
  id             String              @id @default(auto()) @map("_id") @db.ObjectId
  heroId         String              @unique @db.ObjectId
  heroType       String
  heroName       String
  coverPicture   String
  galleryPicture String
  ability        String
  offense        String
  durability     String
  difficulty     String
  skill          HeroDetailsSkills[]
  hero           Hero                @relation(fields: [heroId], references: [id])
}

model Hero {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String       @unique
  img         String
  heroId      Int          @unique
  use         String
  win         String
  ban         String
  role        String[]
  counters    String[]
  counteredBy String[]
  details     HeroDetails?
}

model MlbbAcc {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  accId     String? @unique
  accServer String?
  nickname  String?
  userId    String? @db.ObjectId

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  username      String?
  desc          String?
  email         String    @unique
  emailVerified DateTime?
  image         String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  followers     String[]  @db.ObjectId
  following     String[]  @db.ObjectId
  links         String[]

  accounts Account[]
  mlbbaccs MlbbAcc[]
  sessions Session[]

  posts    Post[]
  comments Comment[]

  @@unique([id, username])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  sessionToken String   @unique
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  createdBy String
  image     String?

  user User @relation(fields: [userId, createdBy], references: [id, username], onDelete: Cascade)

  comments Comment[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  createdBy String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}
